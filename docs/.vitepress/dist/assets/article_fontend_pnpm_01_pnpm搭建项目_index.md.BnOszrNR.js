import{_ as s,o as a,c as i,a5 as e}from"./chunks/framework.DY9GNxgq.js";const u=JSON.parse('{"title":"pnpm 搭建项目","description":"","frontmatter":{"tags":["前端","pnpm"],"categories":["pnpm"]},"headers":[],"relativePath":"article/fontend/pnpm/01_pnpm搭建项目/index.md","filePath":"article/fontend/pnpm/01_pnpm搭建项目/index.md","lastUpdated":1723298912000}'),n={name:"article/fontend/pnpm/01_pnpm搭建项目/index.md"},p=e(`<h1 id="pnpm-搭建项目" tabindex="-1">pnpm 搭建项目 <a class="header-anchor" href="#pnpm-搭建项目" aria-label="Permalink to &quot;pnpm 搭建项目&quot;">​</a></h1><p>pnpm 是一个包管理器，它可以帮助我们快速搭建项目，并且可以帮助我们管理项目的依赖。</p><ul><li>安装 pnpm</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pnpm</span></span></code></pre></div><ul><li>创建目录</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> project_demo</span></span></code></pre></div><ul><li>初始化项目</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span></code></pre></div><ul><li>根目录创建 <code>.npmrc</code> 文件</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 允许将所有依赖项提升到项目的根目录，这样可以减少依赖嵌套的深度，使得依赖管理更加高效。这种做法有时被认为是“不知羞耻”的，因为它可能导致依赖冲突和难以维护的依赖树。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">shamefully-hoist</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 宽松地处理对等依赖关系。这意味着如果项目依赖于另一个软件包，而该软件包指定了特定版本的对等依赖，使用false设置时，即使项目中不存在这些对等依赖的指定版本，安装过程也不会失败。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strict-peer-dependencies</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">false</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 忽略工作区根目录检查。通常，包管理器会检查当前目录是否为工作区的根目录，如果不是，它可能会发出警告或采取不同的行为。设置为true可以禁用这种检查，使得依赖安装可以在任何目录进行。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ignore-workspace-root-check</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">true</span></span></code></pre></div><ul><li>根目录创建 <code>pnpm-workspace.yaml</code> 文件</li></ul><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">packages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;packages/*&quot;</span></span></code></pre></div>`,12),t=[p];function l(h,d,k,c,o,r){return a(),i("div",{"data-pagefind-body":!0},t)}const m=s(n,[["render",l]]);export{u as __pageData,m as default};
